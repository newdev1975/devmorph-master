# Staging Mode Docker Compose for DevMorph Studio
# This configuration mimics production but allows for testing configurations

services:
  # Staging app service similar to production but with testing capabilities
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: staging
    environment:
      - APP_ENV=staging
      - NODE_ENV=production
      - DEBUG=false
      - LOG_LEVEL=info
      - TRUST_PROXY=true
    volumes:
      - app_staging_data:/app/storage
    ports:
      - "${APP_PORT:-3000}:${APP_PORT:-3000}"
    networks:
      - devmorph
    restart: unless-stopped
    # Health check similar to production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT:-3000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Staging database (similar to production but with different naming)
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-staging}
      POSTGRES_USER: ${POSTGRES_USER:-staging}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging}
    volumes:
      - db_staging_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - devmorph
    restart: unless-stopped

  # Staging Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_staging_data:/data
    networks:
      - devmorph
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Staging web server
  web:
    image: nginx:alpine
    ports:
      - "${WEB_PORT:-80}:80"
      - "${SSL_PORT:-443}:443"
    volumes:
      - ./nginx.staging.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl
      - static_staging:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - devmorph
    restart: unless-stopped

  # Staging-specific services
  # Backup service for staging
  backup:
    image: tiredofit/db-backup
    environment:
      - DB_TYPE=postgres
      - DB_HOST=db
      - DB_NAME=${POSTGRES_DB:-staging}
      - DB_USER=${POSTGRES_USER:-staging}
      - DB_PASS=${POSTGRES_PASSWORD:-staging}
      - S3_ENABLED=false
      - DB_DUMP_FREQ=1440  # Daily backup
      - DB_DUMP_BEGIN=+5m
    volumes:
      - ./backups:/backups
    depends_on:
      - db
    networks:
      - devmorph
    restart: unless-stopped

networks:
  devmorph:
    driver: bridge

volumes:
  db_staging_data:
  redis_staging_data:
  app_staging_data:
  static_staging: